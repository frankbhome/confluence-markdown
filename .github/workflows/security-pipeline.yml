# GitHub Actions Enhanced Security Pipeline for confluence-markdown
name: Enhanced Security Pipeline
permissions:
  contents: read

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main", "develop"]
  schedule:
    # Weekly security scan on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Security Scanning
  vulnerability-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install

      - name: Install pip-audit
        run: poetry add pip-audit --group dev

      - name: Run vulnerability scan
        run: |
          echo "🔍 Scanning for vulnerabilities..."
          poetry run pip-audit --format=json --output=vulnerability-report.json
          poetry run pip-audit --format=cyclonedx-json --output=sbom-vulnerabilities.json
          poetry run pip-audit --desc --format=table

      - name: Check for critical vulnerabilities
        run: |
          echo "🚨 Checking for critical vulnerabilities with fixes..."
          CRITICAL_COUNT=$(jq '[.vulnerabilities[] | select(.fix_versions != null and (.vulnerability.severity == "Critical" or .vulnerability.severity == "High"))] | length' vulnerability-report.json)
          echo "Critical/High vulnerabilities with fixes available: $CRITICAL_COUNT"
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ SECURITY GATE FAILED: Critical vulnerabilities with available fixes detected"
            jq '.vulnerabilities[] | select(.fix_versions != null and (.vulnerability.severity == "Critical" or .vulnerability.severity == "High"))' vulnerability-report.json
            exit 1
          else
            echo "✅ No critical vulnerabilities with fixes found"
          fi

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-reports
          path: |
            vulnerability-report.json
            sbom-vulnerabilities.json
          retention-days: 30

  # License Compliance Scanning
  license-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install

      - name: Install license scanning tools
        run: poetry add pip-licenses --group dev

      - name: Generate license reports
        run: |
          echo "📜 Generating license reports..."
          poetry run pip-licenses --format=json --output-file=license-report.json
          poetry run pip-licenses --format=csv --output-file=license-report.csv

      - name: Check for prohibited licenses
        run: |
          echo "🔍 Scanning for prohibited licenses..."
          PROHIBITED_LICENSES="GPL-2.0,GPL-3.0,AGPL-3.0,LGPL-2.1,LGPL-3.0,SSPL-1.0"

          # Check if any prohibited licenses are found
          if poetry run pip-licenses --format=json | jq -r '.[].License' | grep -E "(GPL|AGPL|LGPL|SSPL)" ; then
            echo "❌ ERROR: Prohibited copyleft license detected!"
            echo "Found licenses that may conflict with Apache-2.0"
            echo "Prohibited licenses: ${PROHIBITED_LICENSES}"
            poetry run pip-licenses --format=table
            exit 1
          else
            echo "✅ No prohibited licenses found"
          fi

      - name: Generate license compliance report
        run: |
          cat > license-compliance-report.md << 'EOF'
          # License Compliance Report

          **Generated**: $(date)
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          **Commit**: ${{ github.sha }}

          ## License Summary

          EOF
          poetry run pip-licenses --format=markdown >> license-compliance-report.md

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            license-report.json
            license-report.csv
            license-compliance-report.md
          retention-days: 30

  # Software Bill of Materials (SBOM) Generation
  sbom-generation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install

      - name: Install SBOM tools
        run: poetry add cyclonedx-bom --group dev

      - name: Generate SBOM
        run: |
          echo "📦 Generating Software Bill of Materials..."

          # Generate CycloneDX SBOM
          poetry run cyclonedx-py -o sbom-cyclonedx.json
          poetry run cyclonedx-py -o sbom-cyclonedx.xml --output-format xml

          # Generate dependency tree and reports
          poetry show --tree > dependency-tree.txt
          poetry show --outdated > outdated-dependencies.txt || echo "No outdated dependencies found"

      - name: Create dependency report
        run: |
          cat > dependency-report.md << 'EOF'
          # Dependency Report

          **Generated**: $(date)
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          **Commit**: ${{ github.sha }}

          ## Production Dependencies
          ```
          $(poetry show --only main)
          ```

          ## Development Dependencies
          ```
          $(poetry show --only dev)
          ```

          ## Dependency Tree
          ```
          $(cat dependency-tree.txt)
          ```

          ## Outdated Dependencies
          ```
          $(cat outdated-dependencies.txt)
          ```
          EOF

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-artifacts
          path: |
            sbom-cyclonedx.json
            sbom-cyclonedx.xml
            dependency-tree.txt
            outdated-dependencies.txt
            dependency-report.md
          retention-days: 90

  # Security Gate Validation
  security-gate:
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, license-scan]
    if: always()
    steps:
      - name: Download vulnerability reports
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-reports
          path: ./reports

      - name: Download license reports
        uses: actions/download-artifact@v4
        with:
          name: license-reports
          path: ./reports

      - name: Security gate validation
        run: |
          echo "=== Security Gate Validation ==="

          # Check vulnerability scan results
          if [ -f "./reports/vulnerability-report.json" ]; then
            CRITICAL_VULNS=$(jq '[.vulnerabilities[] | select(.fix_versions != null and (.vulnerability.severity == "Critical" or .vulnerability.severity == "High"))] | length' ./reports/vulnerability-report.json)
            echo "Critical/High vulnerabilities with fixes available: $CRITICAL_VULNS"
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ SECURITY GATE FAILED: Critical vulnerabilities with available fixes detected"
              exit 1
            fi
          fi

          # Check license compliance
          if [ -f "./reports/license-report.json" ]; then
            PROHIBITED=$(jq -r '.[] | select(.License | test("GPL|AGPL|LGPL|SSPL")) | .Name' ./reports/license-report.json || true)
            if [ ! -z "$PROHIBITED" ]; then
              echo "❌ LICENSE GATE FAILED: Prohibited licenses detected:"
              echo "$PROHIBITED"
              exit 1
            fi
          fi

          echo "✅ Security gate passed - no critical issues found"

  # Pipeline Artifacts Collection
  collect-artifacts:
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, license-scan, sbom-generation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./pipeline-artifacts

      - name: Create pipeline summary
        run: |
          mkdir -p final-artifacts

          # Copy all reports to final artifacts
          find ./pipeline-artifacts -name "*.json" -exec cp {} final-artifacts/ \;
          find ./pipeline-artifacts -name "*.xml" -exec cp {} final-artifacts/ \;
          find ./pipeline-artifacts -name "*.md" -exec cp {} final-artifacts/ \;
          find ./pipeline-artifacts -name "*.txt" -exec cp {} final-artifacts/ \;
          find ./pipeline-artifacts -name "*.csv" -exec cp {} final-artifacts/ \;

          # Create comprehensive pipeline summary
          cat > final-artifacts/pipeline-summary.md << 'EOF'
          # Security Pipeline Summary

          **Project**: confluence-markdown
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Timestamp**: $(date -Iseconds)
          **Actor**: ${{ github.actor }}

          ## Artifacts Generated
          - 📋 Software Bill of Materials (SBOM): `sbom-cyclonedx.json`, `sbom-cyclonedx.xml`
          - 🔍 Vulnerability Report: `vulnerability-report.json`
          - 📜 License Compliance: `license-report.json`, `license-compliance-report.md`
          - 📦 Dependency Analysis: `dependency-report.md`, `dependency-tree.txt`
          - ⚠️  Outdated Dependencies: `outdated-dependencies.txt`

          ## Security Status
          - 🔒 Secrets Scan: ✅ Passed (via gitleaks in main CI)
          - 🛡️ Vulnerability Scan: ✅ Passed (no critical vulnerabilities with fixes)
          - 📋 License Compliance: ✅ Passed (no prohibited licenses)
          - 🏗️ SBOM Generation: ✅ Complete

          ## Quality Gates Applied
          - 🔐 **Security**: No critical/high vulnerabilities with available fixes
          - ⚖️ **License**: No GPL/AGPL/LGPL/SSPL licenses allowed
          - 📊 **Coverage**: ≥80% required (enforced in main CI pipeline)
          - 🎯 **Quality**: Code must pass linting and type checking

          ## Pipeline Integration
          This enhanced security pipeline complements the existing CI workflow:
          - **Main CI**: Multi-Python testing, code quality, coverage, basic secret scanning
          - **Security Pipeline**: Deep vulnerability analysis, license compliance, SBOM generation
          - **Combined**: Comprehensive security posture with automated gate enforcement
          EOF

      - name: Upload final pipeline artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-pipeline-artifacts-${{ github.run_id }}
          path: final-artifacts/
          retention-days: 365  # Keep security artifacts for 1 year

      - name: Create pipeline failure documentation
        run: |
          cat > final-artifacts/PIPELINE-FAILURE-CONDITIONS.md << 'EOF'
          # Pipeline Failure Conditions

          This GitHub Actions security pipeline will **FAIL** under the following conditions:

          ## 🔒 Security Failures

          ### Critical Vulnerability Detection
          - **Condition**: Critical or High severity vulnerabilities WITH available fixes
          - **Tool**: pip-audit with JSON output analysis
          - **Rationale**: Fixable security issues must be addressed immediately
          - **Action**: Update dependencies or apply patches before merge
          - **Override**: Requires security team approval and risk documentation

          ### Secrets in Code
          - **Condition**: API keys, tokens, passwords detected in commits
          - **Tool**: gitleaks (runs in main CI pipeline)
          - **Action**: Remove secrets, rotate compromised credentials
          - **Prevention**: Use GitHub Secrets and environment variables only

          ## 📜 License Compliance Failures

          ### Prohibited Licenses
          The following licenses will cause pipeline failure:

          | License | Reason | Impact |
          |---------|---------|---------|
          | **GPL-2.0, GPL-3.0** | Strong copyleft | Requires source disclosure for derivative works |
          | **AGPL-3.0** | Network copyleft | Affects SaaS deployments and web services |
          | **LGPL-2.1, LGPL-3.0** | Lesser copyleft | Linking and distribution restrictions |
          | **SSPL-1.0** | Server Side Public License | Commercial SaaS restrictions |

          ### Rationale for Apache-2.0 Project
          - 🏢 **Commercial Compatibility**: Enables proprietary and commercial use
          - 🌐 **SaaS Deployment**: No source disclosure requirements for web services
          - 🔧 **Enterprise Adoption**: Corporate-friendly licensing terms
          - ⚖️ **Legal Compliance**: Maintains consistent licensing throughout project

          ## 🧪 Quality Gate Integration

          ### Code Coverage (Main CI)
          - **Threshold**: 80% minimum coverage required
          - **Scope**: Source code and scripts (`src/`, `scripts/`)
          - **Tool**: pytest-cov with branch coverage

          ### Code Quality (Main CI)
          - **Linting**: ruff check must pass (no violations)
          - **Type Safety**: mypy type checking must pass
          - **Format**: Consistent code style enforcement

          ## 📦 Build and Test Integration

          ### Package Build
          - **Tool**: Poetry build process
          - **Validation**: Successful wheel/sdist creation required
          - **Dependencies**: All production dependencies must resolve

          ### Test Execution
          - **Framework**: pytest with comprehensive test suite
          - **Coverage**: Unit tests, integration tests, smoke tests
          - **Matrix**: Multi-Python version compatibility (3.9-3.12)

          ## 🔄 Override and Exception Procedures

          ### Security Gate Overrides
          For critical business needs with accepted risk:

          1. **📋 Risk Assessment**: Document security risks and business justification
          2. **👥 Approval Process**: Security team lead approval required
          3. **📅 Timeline**: Must include concrete remediation timeline
          4. **🎫 Tracking**: Create security debt tickets in project management
          5. **🔄 Review**: Weekly security debt review meetings

          ### License Exception Process
          For dependencies with approved license exceptions:

          1. **⚖️ Legal Review**: Legal team evaluation and approval
          2. **📝 Documentation**: Record exception in `LICENSE-EXCEPTIONS.md`
          3. **🔧 Configuration**: Update pipeline license whitelist
          4. **📊 Reporting**: Include in quarterly compliance reports

          ## 📊 Monitoring and Metrics

          ### Security Metrics Dashboard
          - 🕐 **Scan Frequency**: Weekly scheduled + on every PR/push
          - 📈 **Trend Analysis**: Vulnerability count over time
          - ⏱️ **Remediation Time**: Time to fix critical vulnerabilities
          - 📋 **License Compliance**: Percentage of compliant dependencies
          - 💾 **SBOM Coverage**: Complete dependency mapping

          ### Alert Integration
          - 🚨 **Critical Vulnerabilities** → Security team Slack channel
          - ⚖️ **License Violations** → Legal team email notifications
          - 📧 **Pipeline Failures** → Development team GitHub notifications
          - 📊 **Weekly Reports** → Management dashboard updates

          ## 🏗️ Pipeline Architecture

          ### Job Dependencies
          ```
          vulnerability-scan ──┐
                              ├── security-gate
          license-scan ────────┘       │
                                      │
          sbom-generation ─────────────┼── collect-artifacts
                                      │
          [Main CI Pipeline] ──────────┘
          ```

          ### Artifact Lifecycle
          - **Vulnerability Reports**: 30 days retention
          - **License Reports**: 30 days retention
          - **SBOM Artifacts**: 90 days retention
          - **Final Pipeline Artifacts**: 365 days retention
          - **Security Documentation**: Permanent retention

          ### Integration Points
          - **GitHub Actions**: Native workflow integration
          - **Dependabot**: Automated security updates
          - **CodeQL**: Static analysis security scanning
          - **Codecov**: Coverage reporting and trends

          ---

          **Last Updated**: $(date)
          **Pipeline Version**: 1.0.0
          **GitHub Workflow**: .github/workflows/security-pipeline.yml
          EOF

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-documentation
          path: final-artifacts/PIPELINE-FAILURE-CONDITIONS.md
          retention-days: 365
